=======================================
《方舟·编译技术入门与实战》 讲义
=======================================


第一章 课程介绍
==================


关于课程直播
---------------

错过直播没关系,所有直播都有回看

- 课程配套代码及幻灯片地址(也是提问的地方)

  https://github.com/lazyparser/becoming-a-compiler-engineer

  https://github.com/lazyparser/becoming-a-compiler-engineer-codes 

- 课程视频回看(包含所有直播及录播视频)

  https://space.bilibili.com/296494084

- 课程直播地址(可以弹幕或评论区互动)

  https://live.bilibili.com/10339607


主讲人介绍
--------------

吴伟(@lazyparser)

- HelloGCC & HelloLLVM 社区负责人
- 软件所PLCT实验室项目总监(Group Lead)
- 本次课程的组织者和主要讲师


关于本课程
--------------

这是一门什么样的课程?为何要做成慕课?
+++++++++++++++++++++++++++++++++++++++++

- 面向编译器从业人员(新人)的入门培训课程
- 包含了我的编译团队新人培养的完整内容
- 现有的编译原理慕课构成了完整内容的一小部分
- PLCT有2名新人和5位实习生跟大家同步接受培训
- 希望帮助更多小伙伴平缓迈进编译技术领域


已经有很多慕课了。为什么要重复开课?
+++++++++++++++++++++++++++++++++++++++++

- 目标和定位不同:这是编译器从业者的入门培训
- 覆盖内容不同:轻理论,侧重中后端编程实践
- 充分利用已有的慕课资源,不做重复工作(结合SSR模式,后介绍)
- 引论部分直接以冯博琴老师、王挺老师等公开课作为学习材料
- 前端理论部分以 Keith Cooper、Hal Perkins、冯博琴老师等作为学习材料


充分利用已有的慕课资源
+++++++++++++++++++++++++

  https://www.clear.rice.edu/comp412/

  https://courses.cs.washington.edu/courses/csep501/08wi/

  https://www.bilibili.com/video/av9946063

  https://www.bilibili.com/video/av59119931


课程涵盖的内容有哪些?
+++++++++++++++++++++++

- 编译器基础理论知识及算法原理
- Clang/LLVM 框架的使用与开发(以RISC-V后端为例)
- GNU GCC 的实现分析与对比(以RISC-V和C-SKY后端为例)
- 方舟编译框架的实现分析与RISC-V后端支持


课程侧重的内容有哪些?
+++++++++++++++++++++++++

.. image:: ./images/image01.png


学完课程之后掌握的能力
+++++++++++++++++++++++++

- 根据语言定义,能够基于LLVM等开源框架实现对应的编译器
- 能够对应用程序进行更加准确的瓶颈分析和性能优化
- 调试程序更快,心态更平和


面向哪些群体?我适合学习么?
++++++++++++++++++++++++++++

- 程序员或即将成为程序员的在校生

  视频及课件特别考虑了手机屏幕观看,方便上下班通勤时学习

- 需要掌握计算机专业的基础理论,能够自学补充所需知识

  不需要编译背景,在这方面可以是零基础

- 熟练C/C++/Java中一种,平时有写代码


我数学不好,能学会这门课么?
+++++++++++++++++++++++++++

- 能。发挥主观能动性,哪里不会问哪里

- 在视频评论区评论或在 GitHub issues 里提问

  * 我和TA后续会在评论区和issues中进行解答

  * 一对一问答属于企业付费咨询,默认请在社区中公开提问


我英语不好,能学好这门课么?
+++++++++++++++++++++++++++

- 能。英语好不好是主观自我评价。没什么问题

- 计算机领域的句型相对固定,常用术语约几百个


大概需要多长时间学完?
+++++++++++++++++++++++

- 按照新人培训半年的时间做的内容安排

  也可以按照自己时间节奏来安排,贵在坚持

- 每周2~3个课时(直播/录播)

  我会尽量拆分成20分钟左右,可以在上下班通勤的时候看

- 每周6~10个小时写代码

  这是必须的,视频可以不看,代码一定要自己写

参考的教材有哪些?
++++++++++++++++++++

.. image:: ./images/image02.png
  :width: 200

.. image:: ./images/image03.png
  :width: 200

.. image:: ./images/image04.png
  :width: 200


课程与方舟编译框架是什么关系?
++++++++++++++++++++++++++++++++++

- (动机)HelloGCC & HelloLLVM社区希望推动方舟的发展

  与方舟开源社区一起推动国内编译技术的发展与人才的培养

- (内容)为方舟开源编译器提供RISC-V后端支持

  依赖于方舟编译器2020年上半年的开源进度


方舟开源编译框架的介绍和后续路线图
+++++++++++++++++++++++++++++++++++++

史宁宁(小乖他爹)已经做了一期梳理的视频

https://www.bilibili.com/video/av78179578


.. image:: ./images/image05.png
  :width: 400


学完会有证书么?
+++++++++++++++++

- 单纯观看课程(旁听)没有证书或记录
- 完成课程项目作业之后可以将自己名字加入课程的学分名单中
- 能力相互认证的申请是独立的,完成为期三天的现场考核之后获得


后续教学会如何组织?
+++++++++++++++++++++

- SSR模式:独立学习、课堂讨论、研究点探索

  inherit from 刘道玉先生

- 课堂讨论拟采用微信群+邮件列表形式

  共有7次左右讨论题目

- 作业通过GitHub提交

  https://github.com/lazyparser/becoming-a-compiler-engineer


会有客座讲座么?
+++++++++++++++++++

- 有。课堂讨论和研究探索部分会大量邀请客座讲座
- 会邀请PLCT的同事来做技术专题讲座
- 计划邀请社区活跃的专家来分享最新的成果


用什么编程语言讲解?
+++++++++++++++++++++++

- 大量使用C
- 少数场合使用C++和Java

下次课程内容:词法解析
++++++++++++++++++++++++

引论部分的自学资料(请在下次课程前自学):

  https://www.bilibili.com/video/av59119931?p=1

  https://www.bilibili.com/video/av59119931?p=2

  https://www.bilibili.com/video/av9946063?p=1

  https://www.bilibili.com/video/av9946063?p=2


加入本课程的旁听学习群
+++++++++++++++++++++++++++

群有人数限制,满员后请在HelloGCC微信公众号输入「旁听」

.. image:: ./images/image06.png
  :width: 200


.. image:: ./images/image07.png
  :width: 200




第二章 词法分析
====================


关于课程直播
---------------

错过直播没关系,所有直播都有回看

- 课程配套代码及幻灯片地址(也是提问的地方)

  https://github.com/lazyparser/becoming-a-compiler-engineer

  https://github.com/lazyparser/becoming-a-compiler-engineer-codes 

- 课程视频回看(包含所有直播及录播视频)

  https://space.bilibili.com/296494084

- 课程直播地址(可以弹幕或评论区互动)

  https://live.bilibili.com/10339607


主讲人介绍
--------------

吴伟(@lazyparser)

- HelloGCC & HelloLLVM 社区负责人
- 软件所PLCT实验室项目总监(Group Lead)
- 本次课程的组织者和主要讲师


本次课程的内容
-------------------

- 第一节课课后作业的复习（包含一些元学习理论知识）
- 词法分析：知识地图、算法、可视化工具（很好玩）
- 几个必要的数学概念的补充（不要怕）
- 前端编程练习用语言PL/0的准备


你会使用到的资源（课后阅读一定要完成）

  https://www.clear.rice.edu/comp412/ Keith Cooper老师

  https://courses.cs.washington.edu/courses/csep501/08wi/ Hal Perkins老师

  https://www.bilibili.com/video/av9946063 冯博琴老师

  https://www.bilibili.com/video/av59119931 王挺老师



第一节课课后作业的复习（包含一些元学习理论知识）
+++++++++++++++++++++++++++++++++++++++++++++++++++

上周课后作业的复习
*********************

  引论部分的自学资料（请在下次课程前自学）：

  https://www.bilibili.com/video/av59119931?p=1

  https://www.bilibili.com/video/av59119931?p=2

  https://www.bilibili.com/video/av9946063?p=1

  https://www.bilibili.com/video/av9946063?p=2


上周的课后阅读，建立了整体概念
**********************************

  以冯博琴老师的公开课为例:

.. image:: ./images/image08.png
  :width: 350

.. image:: ./images/image09.png
  :width: 350

.. image:: ./images/image10.png
  :width: 350

.. image:: ./images/image11.png
  :width: 350

.. image:: ./images/image12.png
  :width: 350

.. image:: ./images/image13.png
  :width: 350

.. image:: ./images/image14.png
  :width: 350


四个老师，为什么第一课都是总体介绍？
**************************************

- 不管是国内还是国外的编译老师，都先讲编译器的总体架构
- 进一步的，每个领域的课程系列，第一课都是 big picture

  （还没完成上周课后阅读作业的同学请本周完成）


学习的方法：建立自己的知识地图
**********************************

- 这不是某位授课老师的发明创意；这是教育和认知科学的成果
- 进入新的领域，最有效率的方法之一是快速建立知识地图
- 在熟悉的领域内工作，可以看成不断扩展地图边界的过程


对于成年人而言，掌握学习方法论尤为重要
*****************************************

- 本课程的学习者，大多已经成年，有着各类条件约束

  - 有限的时间、有限的注意力、有限的体力
  - 多线任务，有时候不太合乎情理的项目交付 Deadline

- 学会如何快速学习是我作为新人培训人员希望新人达到的目标

  - 学习的方法论能够让我们在尽可能短时间内高质量地获得知识能力

知识地图的作用
****************

- 增加面对未知情况做决策时的自信，缩小风险的概率区间
- 有计划的自我激励，避免从学习区进入恐慌区（Panic Zone）
- 认清自己的工作是工程还是研究

  - SSR中的R一般是在人类知识地图边界处


.. image:: ./images/image15.png
  :width: 200


看英文资料时候的注意事项（不要怕/逃）
*****************************************

- 重要的心理门槛：念出单词正确的发音（价值百万的培训点）
- 术语直接随手查词典（从下周开始基本上都是英文资料了）

  - 大量在线免费词典，例如 https://dict.youdao.com

- 人名不会念很正常

  - 发音不一定是英语，要问；初次见面一定要问对方

- 公司组内或公开报告前确保查询过所有出现单词

  - 否则现场时候心态很可能因为单词发音不确定紧张到崩



词法分析：知识地图、算法、可视化工具（很好玩）
++++++++++++++++++++++++++++++++++++++++++++++++

词法分析：自学 Cooper 教授课件的 1 – 8 
********************************************

https://www.clear.rice.edu/comp412/Lectures/


.. image:: ./images/image16.png
  :width: 500


词法分析：（复习）在编译器整体架构中的位置
********************************************

.. image:: ./images/image17.png
  :width: 500


记住这一页
**************

记住了，理论部分就全部都不会忘了

.. image:: ./images/image18.png
  :width: 500


有了这张图，就不会忘记了

.. image:: ./images/image19.png
  :width: 500

提问：有 minNFA 么？为什么没画？


记住这张图
*************

.. image:: ./images/image20.png
  :width: 500


作业：查如何发音

- nondeterministic
- finite
- automaton
- paths
- final
- Brozozowski
- Hopcroft
- union


词法分析几个算法的掌握程度
****************************

- 要求掌握正则表达式的概念和写法

  - 不同的语言/工具可能有不同的表示法，需要注意细节

- 能够手工构造 RE to NFA、NFA to DFA

  - 能够理解 DFA to min DFA 的算法思想

- 其它算法实现细节及练习，以后工作中用到的时候再回来做

  - 知识地图：你知道算法在这里，有开源实现，知道自己能重新实现


使用工具：正确性验证、可视化
*****************************

.. image:: ./images/image21.png
  :width: 500



https://jex.im/regulex

.. image:: ./images/image22.png
  :width: 500

https://cyberzhg.github.io/toolbox/regex2nfa

.. image:: ./images/image23.png
  :width: 500

https://cyberzhg.github.io/toolbox/min_dfa

.. image:: ./images/image24.png
  :width: 500

https://cyberzhg.github.io/toolbox/nfa2dfa

.. image:: ./images/image25.png
  :width: 500

https://cyberzhg.github.io/toolbox

.. image:: ./images/image26.png
  :width: 500

https://regexr.com/

.. image:: ./images/image27.png
  :width: 500

http://ivanzuzak.info/noam/webapps/fsm_simulator/

.. image:: ./images/image28.png
  :width: 500

.. image:: ./images/image29.png
  :width: 500


课后作业（词法分析部分）
*************************

- 学习 Cooper 的课件（幻灯片）

  - 不明白的地方在我们课程的repo/issues里面提问，我会回答
  - 看完之后阅读/观看另外三位老师的课程，查缺补漏

- 玩一玩推荐的这几个可视化演示的小站点

  - 多数是GitHub开源的，直接看到算法的源代码
  - 如果寻找到好玩的可视化的站点欢迎开issues推荐



几个必要的数学概念的补充（不要怕）
+++++++++++++++++++++++++++++++++++

- 我们这门课程里面说的数学，包含哪些东西？
- 问题的定义和解空间的确定
- 解的存在性
- 解的构造算法、找到最优解的算法
- 数学解法通过计算机程序实现的问题

  （现在不理解不影响学习；后续遇到具体的例子会再解释）


我们这门课程里面说的数学，是个大杂烩
**************************************

- 命题逻辑：如果p成立可以推出q成立，q推导r，那么p->r
- 数学建模：建立一个模型然后在模型中推导
- 形式语言与自动机理论、计算理论
- 整数规划、最优化方法等
- 其它我也尚未理解的数学领域（部分优化使用到了）

  （这一小节听不懂没关系，是我没讲清楚还没有找到更简单的方式，后续我会继续再遇到的时候再次详细说明）


物理世界-> 数学世界-> 物理世界
*******************************

- 物理世界的属性和关系进行抽象，得到一个概念上的模型

  - 例如CPU抽象成编译器中微架构的表示，编程不同部件之间的图

- 在模型上，通过一些计算法则和约束条件，推演得到结论

  - 例如CPU被抽象之后，可以调度和排序出在模型中速度最快的代码序列

- 将模型中的结论映射回物理世界，验证是否满足要求

  - 不断修改模型也是预期中的工作，不可能一下子就完美


数学模型有可能不对，映射到数学模型，尤其是你自己写的，需要不断调整

.. image:: ./images/image30.png
  :width: 300


解的空间和解的存在性
***********************

- 具体问题抽象成模型之后，所有可能的答案构成了一个集合/空间

  - 例：二维平面上的所有点
  - 例：所有的正则表达式
  - 例：一个编译器所有的参数组合

- 给出一个目标，是否存在一个答案（解）能够满足这个目标？

  - 是否有一个点，即落于线段A、又落于线段B上？
  - 是否存在一个正则表达式，能够识别字符串集合A，并拒绝字符串集合B？


找到解的算法、寻找最优的解、验证最优解
****************************************

- 解决了解的存在性的问题之后，接下来就是如何找到这个（些）解

  - 穷举法如果能work，问题都好说
  - 构造法是另一种常见算法
  - 其它方法就比较难了：各种各样的搜索法

- 最优解

  - 给定一些约束条件，一个目标，在可行解中找目标最大化的解
  - 数学性质好的解空间可以构造、搜索、逼近；不好的主要是搜索或近似解
  - 贪婪法、动态规划、剪枝查找、模拟退火、启发式算法……

- 连续空间和离散空间

  - 数学性质（连续性、可微性）不好的离散空间比较难搞
  - 编译器中后端算法中存在大量的离散空间模型，后续会逐步说明

- 验证最优解

  - 一般而言，验证一个解是最优的，比找到这个最优解要容易（不会更难）
  - 在真实的工程场景中，验证最优解有时候也不容易
  - 一般性的，是有一个「差不多可以当作最优解接受」的范围


数学算法变成计算机代码
***************************

- 数字的有效范围和精度范围问题，至今仍是一大类安全隐患
- 算法的时间复杂度（后续每个后端算法都会有说明）
- 算法的空间复杂度（后续每个后端算法都会有说明）
- 数学模型跟真实世界之间的映射关系的精确程度：大量的取舍

一些可以当作知识点记忆的内容
******************************

- 编译器中大量算法处理的是离散空间的最优解问题
- 大量的问题是NP的；也就是说没有多项式时间的解法
- 因此，编译器中大量使用启发式算法寻找近似解

  - 启发式（Heuristic）就是「专家的猜测」


前端编程练习用语言PL/0的准备
++++++++++++++++++++++++++++++++++

PL/0 是什么？一个用于编译器教学的语言
****************************************

- https://en.wikipedia.org/wiki/PL/0

  - 这里有完整的语法和历史介绍，阅读这一个网页就可以进行下一步练习了
  - 里面提供了一些例子，可以用于前一小节RE的测试中

- 理论上图灵完备

  - 实际上受限于可编写的程序的规模（跟C++之父为什么要发明C++同样原因）


为什么我们要用 PL/0
**********************

- 我们的课程包含了前端的实现练习，需要一个语言规范

  - 可选范围：PL/0、Tiger、C、C++、Java、Python、Ruby

- 同时，前端并不是我们本次课程重点，需要一个简单的语言

  - 可选范围： PL/0、Tiger、C、C++、Java、Python、Ruby

- 我们是自学+指导的慕课SSR教学模式，最好用有大量的资料

  - 可选范围： PL/0、Tiger（有防作弊需要）、C、C++、Java、Python、Ruby


在GitHub上搜索 PL0 ：大量学习资料
*************************************

.. image:: ./images/image31.png
  :width: 500


我们会怎么用 PL/0 来帮助学习
*********************************

- 根据语言规范，用 flex/bison 实现词法分析和语法分析
- 翻译到 LLVM IR，用这个过程学习 LLVM IR 的操作
- 掌握后，你可以在工作中自己创造新的语言，DSL或通用都可以

课后练习（PL/0部分）
*********************

- 阅读 PL/0 的语言规范，尝试自己手写几个例子
- 用之前小节提到的可视化工具尝试用RE实现词法分析的匹配部分
- 从GitHub或者gitee上找一些参考的例子，看一看
- 预习 flex 这个工具的语法及使用，跑个例子


第三章 实验起步
====================

关于课程直播
---------------

错过直播没关系，所有直播都有回看

- 课程配套代码及幻灯片地址(也是提问的地方)

  https://github.com/lazyparser/becoming-a-compiler-engineer

  https://github.com/lazyparser/becoming-a-compiler-engineer-codes 

- 课程视频回看(包含所有直播及录播视频)

  https://space.bilibili.com/296494084

- 课程直播地址(可以弹幕或评论区互动)

  https://live.bilibili.com/10339607


主讲人介绍
--------------

吴伟(@lazyparser)

- HelloGCC & HelloLLVM 社区负责人
- 软件所PLCT实验室项目总监(Group Lead)
- 本次课程的组织者和主要讲师


本次课程的内容
-------------------

- 如何从零开始创建一个编译器项目
- 一些非常细微的编程习惯
- 一些非常细微的 git 使用习惯
- 一些非常细微的测试和调试的思想

以上内容不是按照所列次序讲解，而是一边敲代码一边介绍


第二课的课后练习（PL/0部分）
+++++++++++++++++++++++++++++++

- 阅读PL/0的语言规范，尝试自己手写几个例子
- 用之前小节提到的可视化工具尝试用RE实现词法分析的匹配部分
- 从GitHub或者gitee上找一些参考的例子，看一看
- 预习flex这个工具的语法及使用，跑个例子


重申：重在自学，本课程侧重网上没有的内容
+++++++++++++++++++++++++++++++++++++++++++

- 包括USTC张昱老师的课程中也有公开PL/0的资料

  - http://staff.ustc.edu.cn/~yuzhang/compiler/2012s/lectures/basic_project.pdf

- 有不少学生或爱好者公开了自己的笔记和代码，可以借鉴

  - https://github.com/gdut-yy/PL0
  - http://jcf94.com/download/2016-02-21-pl0-From_PL0_To_Flex.pdf
  - https://github.com/IsaacZhu/PL0/blob/master/doc/

  在GitHub上搜PL0有大量不同版本的代码可以阅读和参考


词法、语法分析的实现方式之分
+++++++++++++++++++++++++++++++

- 用 lex/yacc 或类似的生成器来构建

  - 可以快速构建原型系统或小语言；非常快速，熟练的一天就能出demo
  - 工业级编程系统也有使用
  - 主要问题是系统规模大了之后，改起来很头疼

- 手写的语法分析器，以及(或)手写的词法分析器

  - 很多工业级编译器都倾向于手写：清晰/速度
  - 开发周期长一些；另外，你以为后续改动就容易驾驭了么


开始动手写点代码吧，先从哪里开始？
++++++++++++++++++++++++++++++++++++

- 原则：估计生存期超过24小时的代码，就应该用git管理起来
- 习惯：git 的姓名和邮件设置要设置好，个人项目跟公司项目分开
- 技巧：设置一些常用的 git 缩写，提高效率
- 技巧：灵活运用 git 的 staged 和 unstaged 两种状态

  - https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository

- push 之前一定要检查：只要没 push，commits 都可以修改


**（代码方面的具体操作过程，请参见本次课程的视频）**


一些编程能力之外的必知必会
++++++++++++++++++++++++++++

- 复制粘贴的时候要注意版权和开源许可证的兼容性

  - 这点我愿意多强调一些：国内目前关注的还太少

- 将工具生成的代码，跟你自己的改动，最好能够在 git 上区分开

  - 这样可以方便事后代码评审，并屏蔽掉工具升级带来的影响
  - 如果不进行手工修改，不要跟踪工具生成的代码

- 能够自动化的过程，都应该自动化( 今天是 Makefile )


更快更强：如何高生产力的完成工作
++++++++++++++++++++++++++++++++++

- 在写代码的时候就要有所考虑：如何进行测试？

  - 打印一些log依然是主流和有用的调试方式
  - 每一次打印的log都要有意义，是长期保存的代码/系统的一部分
  - 避免使用「111、test、log」这样的输出信息，用更有信息的文本代替

- 如何避免调试(Debugging)？结构清晰、测试充分、定位容易
- 如何高效率调试？后续课程再说












